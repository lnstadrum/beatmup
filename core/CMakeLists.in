#
#    Beatmup image and signal processing library
#    Copyright (C) 2019, lnstadrum
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
cmake_minimum_required(VERSION 3.2.1)

option(USE_OPENGL  "Use standard OpenGL backend"       OFF)
option(USE_GLX     "Use GLX backend"                   OFF)
option(USE_EGL     "Use EGL backend"                   OFF)
option(USE_EGL_DRM "Use EGL backend with DRM fallback" OFF)
option(USE_NEON    "Use NEON on ARM"                   OFF)

# Raspberry Pi-specific options
option(USE_BRCM_LIBS "Use Broadcom GL libraries (Raspberry Pi prior to 4)" OFF)

# setting paths variables
set(BEATMUP_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}/..")
set(BEATMUP_SRC_DIR "${CMAKE_CURRENT_LIST_DIR}")

# building workspace
set(BEATMUP_BUILD_DIR "${BEATMUP_ROOT_DIR}/build")

# glew root folder
set(BEATMUP_GLEW_DIR "${BEATMUP_ROOT_DIR}/glew-cmake")

# architecture-specific flags
if (USE_NEON)
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -mfpu=neon -DBEATMUP_ENABLE_NEON")
    set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}   -mfpu=neon -DBEATMUP_ENABLE_NEON")
endif(USE_NEON)

# platform-specific flags
if (WIN32)
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DBEATMUP_PLATFORM_WINDOWS")
    link_libraries(gdiplus)
else()
    find_package(Threads REQUIRED)
    link_libraries(${CMAKE_THREAD_LIBS_INIT})
endif (WIN32)


set(BEATMUP_SOURCES
    ${BEATMUP_SRC_DIR}/context.cpp
    ${BEATMUP_SRC_DIR}/geometry.cpp
    ${BEATMUP_SRC_DIR}/memory.cpp
    ${BEATMUP_SRC_DIR}/parallelism.cpp
    ${BEATMUP_SRC_DIR}/bitmap/abstract_bitmap.cpp
    ${BEATMUP_SRC_DIR}/bitmap/bitmap_access.cpp
    ${BEATMUP_SRC_DIR}/bitmap/content_lock.cpp
    ${BEATMUP_SRC_DIR}/bitmap/converter.cpp
    ${BEATMUP_SRC_DIR}/bitmap/crop.cpp
    ${BEATMUP_SRC_DIR}/bitmap/internal_bitmap.cpp
    ${BEATMUP_SRC_DIR}/bitmap/metric.cpp
    ${BEATMUP_SRC_DIR}/bitmap/operator.cpp
    ${BEATMUP_SRC_DIR}/bitmap/tools.cpp
    ${BEATMUP_SRC_DIR}/bitmap/resampler.cpp
    ${BEATMUP_SRC_DIR}/bitmap/resampler_cnn_x2/gles20/cnn.cpp
    ${BEATMUP_SRC_DIR}/bitmap/resampler_cnn_x2/gles31/cnn.cpp
    ${BEATMUP_SRC_DIR}/color/color_spaces.cpp
    ${BEATMUP_SRC_DIR}/color/matrix.cpp
    ${BEATMUP_SRC_DIR}/contours/contours.cpp
    ${BEATMUP_SRC_DIR}/filters/color_matrix.cpp
    ${BEATMUP_SRC_DIR}/filters/pixelwise_filter.cpp
    ${BEATMUP_SRC_DIR}/filters/sepia.cpp
    ${BEATMUP_SRC_DIR}/fragments/fragment.cpp
    ${BEATMUP_SRC_DIR}/fragments/sequence.cpp
    ${BEATMUP_SRC_DIR}/gpu/compute_program.cpp
    ${BEATMUP_SRC_DIR}/gpu/display_switch.cpp
    ${BEATMUP_SRC_DIR}/gpu/gpu_task.cpp
    ${BEATMUP_SRC_DIR}/gpu/linear_mapping.cpp
    ${BEATMUP_SRC_DIR}/gpu/pipeline.cpp
    ${BEATMUP_SRC_DIR}/gpu/program.cpp
    ${BEATMUP_SRC_DIR}/gpu/program_bank.cpp
    ${BEATMUP_SRC_DIR}/gpu/recycle_bin.cpp
    ${BEATMUP_SRC_DIR}/gpu/rendering_programs.cpp
    ${BEATMUP_SRC_DIR}/gpu/storage_buffer.cpp
    ${BEATMUP_SRC_DIR}/gpu/swapper.cpp
    ${BEATMUP_SRC_DIR}/gpu/texture_handler.cpp
    ${BEATMUP_SRC_DIR}/gpu/variables_bundle.cpp
    ${BEATMUP_SRC_DIR}/masking/flood_fill.cpp
    ${BEATMUP_SRC_DIR}/masking/region_filling.cpp
    ${BEATMUP_SRC_DIR}/pipelining/custom_pipeline.cpp
    ${BEATMUP_SRC_DIR}/pipelining/multitask.cpp
    ${BEATMUP_SRC_DIR}/scene/renderer.cpp
    ${BEATMUP_SRC_DIR}/scene/rendering_context.cpp
    ${BEATMUP_SRC_DIR}/scene/scene.cpp
    ${BEATMUP_SRC_DIR}/shading/image_shader.cpp
    ${BEATMUP_SRC_DIR}/shading/shader_applicator.cpp
    ${BEATMUP_SRC_DIR}/utils/bitmap_from_chunk.cpp
    ${BEATMUP_SRC_DIR}/utils/bmp_file.cpp
    ${BEATMUP_SRC_DIR}/utils/chunkfile.cpp
    ${BEATMUP_SRC_DIR}/utils/image_resolution.cpp
    ${BEATMUP_SRC_DIR}/utils/input_stream.cpp
    ${BEATMUP_SRC_DIR}/utils/listing.cpp
    ${BEATMUP_SRC_DIR}/utils/profiler.cpp
    ${BEATMUP_SRC_DIR}/utils/progress_tracking.cpp
    ${BEATMUP_SRC_DIR}/utils/string_builder.cpp
    ${BEATMUP_SRC_DIR}/utils/string_utils.cpp
)

if (PLATFORM_ANDROID)
    set(BEATMUP_SOURCES ${BEATMUP_SOURCES} ${BEATMUP_SRC_DIR}/utils/android/asset.cpp)
endif()

if (PROFILE_NNETS)
    set(BEATMUP_SOURCES ${BEATMUP_SOURCES}
        ${BEATMUP_SRC_DIR}/nnets/classifier.cpp
        ${BEATMUP_SRC_DIR}/nnets/conv2d.cpp
        ${BEATMUP_SRC_DIR}/nnets/deserialized_model.cpp
        ${BEATMUP_SRC_DIR}/nnets/dense.cpp
        ${BEATMUP_SRC_DIR}/nnets/image_sampler.cpp
        ${BEATMUP_SRC_DIR}/nnets/inference_task.cpp
        ${BEATMUP_SRC_DIR}/nnets/model.cpp
        ${BEATMUP_SRC_DIR}/nnets/operation.cpp
        ${BEATMUP_SRC_DIR}/nnets/pooling2d.cpp
        ${BEATMUP_SRC_DIR}/nnets/softmax.cpp
        ${BEATMUP_SRC_DIR}/nnets/storage.cpp
    )
endif()

if (PROFILE_AUDIO)
    set(BEATMUP_SOURCES ${BEATMUP_SOURCES}
        ${BEATMUP_SRC_DIR}/audio/sample_arithmetic.cpp
        ${BEATMUP_SRC_DIR}/audio/signal.cpp
        ${BEATMUP_SRC_DIR}/audio/signal_fragment.cpp
        ${BEATMUP_SRC_DIR}/audio/signal_plot.cpp
        ${BEATMUP_SRC_DIR}/audio/source.cpp
        ${BEATMUP_SRC_DIR}/audio/wav_utilities.cpp
        ${BEATMUP_SRC_DIR}/audio/playback/abstract_playback.cpp
        ${BEATMUP_SRC_DIR}/audio/playback/realtime_playback.cpp
    )
    if (PLATFORM_ANDROID)
        set(BEATMUP_SOURCES ${BEATMUP_SOURCES}
            ${BEATMUP_SRC_DIR}/audio/playback/android/sles_playback.cpp
            ${BEATMUP_SRC_DIR}/audio/playback/android/aaudio_playback.cpp
        )
    endif()
endif()


include_directories(${BEATMUP_SRC_DIR})


# selecting OpenGL backend
if (USE_OPENGL OR USE_GLX)
    add_subdirectory(${BEATMUP_GLEW_DIR} "${BEATMUP_BUILD_DIR}/glew-build")
    link_directories("${BEATMUP_BUILD_DIR}/lib")
    include_directories("${BEATMUP_GLEW_DIR}/include")

    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DGLEW_STATIC")

    find_package(OpenGL REQUIRED)
    link_libraries(${OPENGL_LIBRARY})
    if (USE_GLX)
        find_package(X11 REQUIRED)
        link_libraries(${X11_LIBRARIES} glewmx)
    endif()

    if (WIN32)
        link_libraries(glew$<$<CONFIG:Debug>:d>)
    endif()

elseif (USE_EGL OR USE_EGL_DRM)
    message("Searching for OpenGL ES libraries...")
    set(USE_PKGCONFIG NO)

    # enable DRM/GBM fallback
    if (USE_EGL_DRM)
        message("Linking against libdrm and libgbm")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBEATMUP_GLES_ALLOW_DRM_FALLBACK")
        link_libraries(drm gbm)
        include_directories("/usr/include/libdrm")
    endif()

    # handling raspberry pi having closed-source EGL/GLES implementation
    if (USE_BRCM_LIBS)
        if (EXISTS "/opt/vc/lib/libbrcmEGL.so")
            set(EGL_LIBRARY "/opt/vc/lib/libbrcmEGL.so")
            message("Using Broadcom GL libraries")
            if (NOT DEFINED GLES_VERSION)
                set(GLES_VERSION 20)
            endif()
        else()
            message(FATAL_ERROR "Cannot find Broadcom GL libraries in /opt/vc folder")
        endif()
    else()
        find_library(EGL_LIBRARY   EGL)
        if (NOT EGL_LIBRARY)
            set(USE_PKGCONFIG YES)
            find_package(PkgConfig)
            pkg_check_modules(EGL REQUIRED egl)
        endif()
    endif()

    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DBEATMUP_OPENGLVERSION_GLES")

    if (GLES_VERSION EQUAL 20)
        if (USE_PKGCONFIG)
            pkg_check_modules(GLES2 REQUIRED glesv2)
        elseif (USE_BRCM_LIBS)
            set(GLES_LIBRARY "/opt/vc/lib/libbrcmGLESv2.so")
        else()
            find_library(GLES_LIBRARY  GLESv2)
        endif()
        set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DBEATMUP_OPENGLVERSION_GLES20")
    elseif (GLES_VERSION EQUAL 31)
        if (USE_PKGCONFIG)
            pkg_check_modules(GLES3 REQUIRED glesv3)
        else()
            find_library(GLES_LIBRARY  GLESv3)
        endif()
        set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DBEATMUP_OPENGLVERSION_GLES31")
    else()
        message(FATAL_ERROR "GLES_VERSION must specify a valid OpenGL ES version.")
    endif()

    if (USE_PKGCONFIG)
        link_libraries(${EGL_LIBRARIES} ${GLES2_LIBRARIES})
        include_directories(${EGL_INCLUDE_DIR} ${GLES2_INCLUDE_DIR})
    else()
        message("EGL library used: ${EGL_LIBRARY} ${GLES_LIBRARY}")
        link_libraries(${EGL_LIBRARY} ${GLES_LIBRARY})
        if (USE_BRCM_LIBS)
            include_directories("/opt/vc/include")
        endif()
    endif()

else()
    message(FATAL_ERROR "OpenGL backend not specified. Please define USE_OPENGL, USE_GLX or USE_EGL.")
endif()
